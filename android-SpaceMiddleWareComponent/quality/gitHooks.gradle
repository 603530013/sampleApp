import java.nio.file.Files
import java.nio.file.Paths

task copyGitHooks(type: Copy) {
    description = "Copies the git hooks from scripts/git-hooks to the .git folder."
    group = "git hooks"
    from(new File("$rootDir/quality/git-hooks/")) {
        include("**/*.sh")
        rename("(.*).sh", '$1')
    }
    into {
        def path = Paths.get("$rootDir/.git/hooks")

        if (!Files.exists(path)) {
            Files.createDirectory(path)
        }

        new File("$rootDir/.git/hooks")
    }
}

task installGitHooks(type: Exec) {
    description = "Installs the pre-commit git hooks from scripts/git-hooks."
    group = "git hooks"
    workingDir(rootDir)
    commandLine("chmod")
    args("-R", "+x", ".git/hooks/")
    dependsOn(tasks.named("copyGitHooks"))
//    onlyIf {
//        isLinuxOrMacOs()
//    }
    doLast {
        logger.info("Git hooks installed successfully.")
    }
}

task deleteGitHooks(type: Delete) {
    description = "Delete the pre-commit git hooks."
    group = "git hooks"
    delete(fileTree(".git/hooks/"))
}

afterEvaluate {
    tasks["clean"].dependsOn(tasks.named("installGitHooks"))
}

/**
 * Util to check if the project run on Linux or Mac operating system
 *
 * @return true if the operating system is one of them
 */
private static Boolean isLinuxOrMacOs() {
    String osName = System.getProperty("os.name").toLowerCase(Locale.ROOT)

    var result = new ArrayList<String>()
    ["linux", "mac os", "macos"].forEach {
        if (osName.startsWith(it)) {
            result.add(osName)
        }
    }
    return !result.empty
}
