def ignoredPrj = [
        "logger", // package android.test does not exist
        "buildSrc",

        // ignore container folders/projects
        "gma",
        "common",
        "features",

        // ignore specific subprojects
        "test",
        "ui",
        "theme",

        // tests stall for unknown reason
        "authentication",
        "vehicleCommand"
]
def coveredProject = subprojects.findAll { !(it.name in ignoredPrj) }

apply plugin: 'jacoco'

configure(coveredProject) { prj ->
    task jacocoReport(type: JacocoReport, dependsOn: 'testDevDebugUnitTest') {
        group = 'Reporting'
        description = 'Generate Jacoco coverage'

        reports {
            csv.enabled = false
            xml.enabled = true
            html.enabled = true
        }

        final excludeFilter = [
                // data binding
                'android/**/*.*',
                'androidx/**/*.*',
                '**/android/**/*.*',
                '**/androidx/**/*.*',
                '**/databinding/**/*.*',
                '**/databinding/*.*',
                '**/BR.*',
                // android
                '**/R.class',
                '**/R$*.class',
                '**/BuildConfig.*',
                '**/Manifest*.*',
                '**/AndroidManifest*.*',
                '**/*Test*.*',
                // kotlin
                '**/*$Lambda$*.*',
                '**/*Companion*.*',
                // sealed and data classes
                '**/*$Result.*',
                '**/*$Result$*.*',
                // android room generated class
                '**/*_Impl.*',
                // generated classes and functions
                '**/*$*.*',
                '**/generated/*',
                '**/generated/**/*',

                // project models
                '**/model/**/*',
                '**/models/**/*',
                '**/*ViewHolder.kt',
                '**/*Fragment.kt',
                '**/*Activity.kt',
                '**/*Dialog.kt',
                '**/*App.kt',
                '**/*Module.kt',
                '**/*Modules.kt',
                '**/ui/*Adapter.kt',
                '**/ui/**/*Adapter.kt',
                '**/*JsonAdapter.*',
                '**/dao/*',
                '**/common/base/base/**'
        ]

        def includeFilter = [
                '**/*.*'
        ]

        println "Setting up reporting -> dir path : ${prj.buildDir}"
        final kotlinTree = fileTree(dir: "${prj.buildDir}/tmp/kotlin-classes/devDebug", excludes: excludeFilter)
        final javacTree = fileTree(dir: "${prj.buildDir}/intermediates/javac/devDebug", excludes: excludeFilter)
        final mainSrcJava = "${prj.projectDir}/src/main/java"
        final mainSrcKotlin = "${prj.projectDir}/src/main/kotlin"

        sourceDirectories.setFrom files([mainSrcJava, mainSrcKotlin])
        classDirectories.setFrom files([kotlinTree, javacTree])
        executionData.setFrom fileTree(dir: prj.buildDir, includes: [
                'jacoco/testDevDebugUnitTest.exec',
                "**/*.exec",
                "*.exec",
                'outputs/code-coverage/connected/*coverage.ec',
                "outputs/code_coverage/devDebugAndroidTest/connected/*coverage.ec"
        ])
    }
}

subprojects.each { $project ->
    def myTasks = $project.tasks.matching { it.name == "jacocoReport" }

    // As we haven't defined yet the task we need to lazy register it first
    if (myTasks.size() == 0) {
        $project.tasks.register("jacocoReport", JacocoReport)
    }
}

/**
 *  Root task that generates an aggregated Jacoco test coverage report for all sub-projects
 */
task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    jacoco {
        toolVersion = "0.8.7"
    }

    tasks.withType(Test) {
        ignoreFailures true
    }

    //jacocoClasspath = project.buildscript.configurations.classpath

    def projectsToReport = [
            "app",
            "common",
            "core",
            "features",
            "banner",
            "brand",
            "home",
            "navigation",
            "remoteCommands",
            "theme",
            "trips",
            "vehicle",
            "dealerEnrollment"
    ]
    def projects = subprojects.findAll { it.name in projectsToReport } + coveredProject
    //def projects = coveredProject

    projects.each {
        println "Full report task for: $it.name"
    }

    //noinspection GrUnresolvedAccess
    dependsOn(projects.jacocoReport)

    final source = files(projects.jacocoReport.sourceDirectories)

    additionalSourceDirs.setFrom source
    sourceDirectories.setFrom source

    //jacocoClasspath.setFrom files(projects.jacocoReport.classDirectories)
    classDirectories.setFrom files(projects.jacocoReport.classDirectories)
    executionData.setFrom files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination file('build/reports/jacoco/html') // this creates a folder
        }
        csv {
            enabled false
            destination file('build/reports/jacoco/jacocoFullReport.csv')
        }

        xml {
            enabled true
            destination file('build/reports/jacoco/jacocoFullReport.xml')
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData.setFrom files(executionData.findAll { it.exists() })

        executionData.findAll { it.exists() }.each { val ->
            println("JacocoFull -> ${val}")
        }
    }
}
